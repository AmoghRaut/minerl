# Copyright (c) 2020 All Rights Reserved
# Author: William H. Guss, Brandon Houghton
import copy
import logging
import os
from typing import Any, Dict, Tuple

from lxml import etree
import numpy as np
from minerl.env._multiagent import _MultiAgentEnv
from minerl.env._singleagent import _SingleAgentEnv
from minerl.herobraine.envs import Navigate

logger = logging.getLogger(__name__)
class _FakeEnvMixin(object):
    """A fake environment for unit testing.

    Uses the info from a single agent environment.
    """
    def __init__(self, *args, **kwargs):
        super(_FakeEnvMixin, self).__init__(*args, **kwargs)

        # This NPZ was generated by navigate.
        assert isinstance(self.task, Navigate), (
            "the data for fake environments was generated by Navigate")
        # TODO: Make github issue for expanding fake envs.
        # TODO: Move fake environments.
        self._info = np.load(
            os.path.join(os.path.abspath(os.path.dirname(__file__)), 'info.npz'), 
        allow_pickle=True)['arr_0'].tolist()

        
    def _setup_instances(self) -> None:
        self.instances = [NotImplemented for _ in range(self.task.agent_count)]

    def _send_mission(self, _, mission_xml_etree : etree.Element, token_in : str) -> None:
        logger.debug(
            "Sending fake XML for {}:".format(token_in)
            +  etree.tostring(mission_xml_etree))
        
    def _TO_MOVE_find_ip_and_port(self, _, token_in : str) -> Tuple[str,str]:
        return "1", "1"

    def _peek_obs(self) -> Dict[str,Any]:
        return self._get_fake_obs()

    def step(self) -> Tuple[
        Dict[str,Dict[str, Any]], Dict[str,float], Dict[str,bool], Dict[str,Dict[str, Any]]]:
        fobs = self._get_fake_obs()
        done = False
        reward = 0.0
        info = {}
        return fobs, reward, done, info

    def _get_fake_obs(self) -> Dict[str, Any]:

        obs = {}
        for agent in self.task.agent_names:
            info = self._get_info()
            obs[agent] = self._process_observation(agent, info['pov'], info)

        return obs

    def _get_info(self) -> Dict[str, Any]:
        return copy.deepcopy(self._info)
        

class _FakeMultiAgentEnv(_FakeEnvMixin, _MultiAgentEnv):
    """The fake multiagent environment."""
    pass

class _FakeSingleAgentEnv(_FakeEnvMixin, _SingleAgentEnv):
    """The fake singleagent environment."""
    def _get_fake_obs(self) -> Dict[str, Any]:
        obs = super()._get_fake_obs()
        return obs[self.task.agent_names[0]]